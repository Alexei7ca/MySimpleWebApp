#5432 is the default port of Postgres
#for docker
#spring.datasource.url=jdbc:postgresql://my-postgres-db:5432/employees
spring.datasource.url=jdbc:postgresql://localhost:5432/employees
spring.datasource.username=postgres
spring.datasource.password=postgres

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
# Hibernate ddl auto (create, create-drop, validate, update) / validate is preferable (it shows that everything matches between DB tables and the entities)
spring.jpa.hibernate.ddl-auto=none



#shows Hibernate auto-generated SQL queries and the order in which they were executed
spring.jpa.show-sql=true
#beautify or pretty print the SQL
spring.jpa.properties.hibernate.format_sql=true

## IMPORTANT While this is extremely simple, it's not recommended,
# as it directly unloads everything to standard output without any optimizations of a logging framework.
# Moreover, it doesn't log the parameters of prepared statements.
# see how to do it with loggers: https://www.baeldung.com/sql-logging-spring-boot



##Actuator settings
management.endpoints.web.exposure.include=*
management.endpoint.loggers.enabled=true
management.endpoint.health.show-components=always
management.endpoint.health.show-details=always

#enable a single endpoint ->  management.endpoint.<id>.enabled  ex:
#management.endpoint.shutdown.enabled=true    (we enabled the "shutdown" endpoint)

#management.endpoints.enabled-by-default=false   (disable all endpoints)
#management.endpoint.info.enabled=true    (enable only the "info" one)

#Since Endpoints may contain sensitive information, careful consideration should be given about when to expose them JMX(Java Management Extensions) or in WEB
#management.endpoints.jmx.exposure.include=*    (include all in JMX)
#management.endpoints.web.exposure.exclude=*    (exclude all from web)
#management.endpoints.jmx.exposure.include=health,info   (exclude property takes precedent so here we are exposing only health n info)

#management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.exclude=env,beans  (with this two we include all except env & beans)

##db migration settings

#liquibase
spring.liquibase.enabled=true
spring.application.name=EmployeeServiceApp
spring.liquibase.change-log=classpath:db/changelog/changelog-master.xml


##Active mq
spring.activemq.broker-url=tcp://localhost:61616
#for docker
#spring.activemq.broker-url=tcp://my-activemq:61616
spring.activemq.user=admin
spring.activemq.password=admin

#without this it may throw a MessageConverterException: Serializable class not available to broker (because the entity class extends serializable)
#java.lang.ClassNotFoundException: Forbidden class com.mastery.java.task.Model.SystemMessage!
# This class is not trusted to be serialized as ObjectMessage payload.
# Please take a look at http://activemq.apache.org/objectmessage.html for more information on how to configure trusted classes.
spring.activemq.packages.trust-all=true
